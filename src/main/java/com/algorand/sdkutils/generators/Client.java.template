package com.algorand.algosdk.v2.client.common;

import java.util.Map.Entry;

import com.squareup.okhttp.HttpUrl;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Request.Builder;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;
import com.algorand.algosdk.crypto.Address;

IMPORTSGOHERE
public class Client {

	private OkHttpClient client;
	private String host;
	private int port;
	private String token;

	public int getPort() {
		return port;
	}

	public String getHost() {
		return host;
	}

	public static HttpUrl getHttpUrl(QueryData qData, int port, String host) {
		HttpUrl.Builder httpUrlBuilder = (new HttpUrl.Builder()).scheme("http").port(port).host(host);
		for (String ps : qData.pathSegments) {
			httpUrlBuilder.addPathSegment(ps);
		}
		for (Entry<String, String> kvp : qData.queries.entrySet()) {
			httpUrlBuilder.addQueryParameter(kvp.getKey(), kvp.getValue());
		}
		HttpUrl httpUrl = httpUrlBuilder.build();
		return httpUrl;
	}

	public Client(String host, int port, String token) {
		MediaType.parse("application/json; charset=utf-8");
		this.host = host;
		this.port = port;
		this.token = token;
		this.client = new OkHttpClient();
	}

	public Response executeCall(QueryData qData, String getOrPost) throws Exception {

		HttpUrl httpUrl = getHttpUrl(qData, port, host);
		Builder reqBuilder = new Request.Builder().url(httpUrl);
		if (token != null) {
			reqBuilder.addHeader("X-Algo-API-Token", token);
		}
		RequestBody rb = RequestBody.create(
				MediaType.parse("Binary data"),
				qData.bodySegments.isEmpty() ? new byte[0] : qData.bodySegments.get(0));

		if (getOrPost.equals("get")) {
			reqBuilder.get();
		} else {
			reqBuilder.post(rb);
		}

		Request request = reqBuilder.build();
		Response response = null;
		try {
			response = client.newCall(request).execute();
		} catch (Exception e) {
			throw e;
		}
		return response;
	}
	
METHODSGOHERE}
